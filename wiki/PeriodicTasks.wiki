#summary Design to support periodic task model in the `SuperCore`.
#labels Phase-Design

= Introduction =

This page provides the design of how periodic tasks will be supported.

== Broad Goals ==

Periodic tasks are currently supported in RTEMS by the Rate Monotonic (RM) Manager.  Part of this project is to provide EDF scheduling in RTEMS, which will also support periodic tasks. To avoid code duplication, the existing support for periodic tasks will be extended as necessary to support both schedulers.  This extension to the current support for periodic tasks should enable future implementations of scheduling algorithms that use the periodic task model.

== Re-using the RM Manager ==

RM tasks are exposed at the user API level after task creation, and the RM Manager is responsible for setting up period timeouts, enforcing timeouts, and tracking period statistics. The user application is responsible for "creating" the periodic task and queuing periodic jobs by invoking the RM manager in a loop that blocks on the period timer.  These responsibilities are not solely applicable to rate monotonic scheduling; they are useful and necessary for other scheduling algorithms that support periodic tasks.

The bulk of work done by the RM Manager is in the `rtems_rate_monotonic_period` function, which is called by the user application at the start of the periodic loop.  The other functions of interest in the user API are:
  * `rtems_rate_monotonic_create`
  * `rtems_rate_monotonic_ident`
  * `rtems_rate_monotonic_cancel`
  * `rtems_rate_monotonic_delete`
  * `rtems_rate_monotonic_get_status`
  * `rtems_rate_monotonic_get_statistics`
  * `rtems_rate_monotonic_reset_statistics`
  * `rtems_rate_monotonic_reset_all_statistics`
  * `rtems_rate_monotonic_report_statistics_with_plugin`
  * `rtems_rate_monotonic_report_statistics`
Most of these functions have corresponding `_Rate_monotonic_` functions in the RM Manager internal interface.


