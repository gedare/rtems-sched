Index: cpukit/score/include/rtems/score/priority.h
===================================================================
RCS file: /usr1/CVS/rtems/cpukit/score/include/rtems/score/priority.h,v
retrieving revision 1.26
diff -u -p -r1.26 priority.h
--- cpukit/score/include/rtems/score/priority.h	14 Jun 2010 06:08:40 -0000	1.26
+++ cpukit/score/include/rtems/score/priority.h	27 Jul 2010 16:13:58 -0000
@@ -67,76 +67,10 @@ typedef uint32_t   Priority_Control;
 #define PRIORITY_MAXIMUM      rtems_maximum_priority
 
 /**
- *  The following record defines the information associated with
- *  each thread to manage its interaction with the priority bit maps.
- */
-typedef struct {
-  /** This is the address of minor bit map slot. */
-  Priority_Bit_map_control *minor;
-  /** This is the priority bit map ready mask. */
-  Priority_Bit_map_control  ready_major;
-  /** This is the priority bit map ready mask. */
-  Priority_Bit_map_control  ready_minor;
-  /** This is the priority bit map block mask. */
-  Priority_Bit_map_control  block_major;
-  /** This is the priority bit map block mask. */
-  Priority_Bit_map_control  block_minor;
-}   Priority_Information;
-
-/**
  *  This variable contains the configured number of priorities
  */
 extern uint8_t rtems_maximum_priority;
 
-/**
- *  Each sixteen bit entry in this array is associated with one of
- *  the sixteen entries in the Priority Bit map.
- */
-SCORE_EXTERN volatile Priority_Bit_map_control _Priority_Major_bit_map;
-
-/** Each bit in the Priority Bitmap indicates whether or not there are
- *  threads ready at a particular priority.  The mapping of
- *  individual priority levels to particular bits is processor
- *  dependent as is the value of each bit used to indicate that
- *  threads are ready at that priority.
- */
-SCORE_EXTERN Priority_Bit_map_control
-               _Priority_Bit_map[16] CPU_STRUCTURE_ALIGNMENT;
-
-/*
- *  The definition of the Priority_Bit_map_control type is CPU dependent.
- *
- */
-
-#if ( CPU_USE_GENERIC_BITFIELD_CODE == FALSE )
-/**
- *  This method returns the priority bit mask for the specified major
- *  or minor bit number.
- *
- *  @param[in] _bit_number is the bit number for which we need a mask
- *
- *  @return the priority bit mask
- *
- *  @note This may simply be a pass through to a CPU dependent implementation.
- */
-#define _Priority_Mask( _bit_number ) \
-  _CPU_Priority_Mask( _bit_number )
-#endif
-
-#if ( CPU_USE_GENERIC_BITFIELD_CODE == FALSE )
-/**
- *  This method returns the bit index position for the specified priority.
- *
- *  @param[in] _priority is the priority for which we need the index.
- *
- *  @return This method returns the array index into the priority bit map.
- *
- *  @note This may simply be a pass through to a CPU dependent implementation.
- */
-#define _Priority_Bits_index( _priority ) \
-  _CPU_Priority_bits_index( _priority )
-#endif
-
 #ifndef __RTEMS_APPLICATION__
 #include <rtems/score/priority.inl>
 #endif
Index: cpukit/score/inline/rtems/score/priority.inl
===================================================================
RCS file: /usr1/CVS/rtems/cpukit/score/inline/rtems/score/priority.inl,v
retrieving revision 1.25
diff -u -p -r1.25 priority.inl
--- cpukit/score/inline/rtems/score/priority.inl	8 May 2009 04:55:53 -0000	1.25
+++ cpukit/score/inline/rtems/score/priority.inl	27 Jul 2010 16:13:58 -0000
@@ -28,21 +28,6 @@
  *  @{
  */
 
-#include <rtems/score/bitfield.h>
-
-/**
- *  This routine performs the initialization necessary for this handler.
- */
-
-RTEMS_INLINE_ROUTINE void _Priority_Handler_initialization( void )
-{
-  int index;
-
-  _Priority_Major_bit_map = 0;
-  for ( index=0 ; index <16 ; index++ )
-     _Priority_Bit_map[ index ] = 0;
-}
-
 /**
  *  This function returns true if the_priority if valid for a
  *  user task, and false otherwise.
@@ -60,157 +45,7 @@ RTEMS_INLINE_ROUTINE bool _Priority_Is_v
   return ( the_priority <= PRIORITY_MAXIMUM );
 }
 
-/**
- *  This function returns the major portion of the_priority.
- */
-
-RTEMS_INLINE_ROUTINE Priority_Bit_map_control   _Priority_Major (
-  Priority_Control the_priority
-)
-{
-  return (Priority_Bit_map_control)( the_priority / 16 );
-}
-
-/**
- *  This function returns the minor portion of the_priority.
- */
 
-RTEMS_INLINE_ROUTINE Priority_Bit_map_control   _Priority_Minor (
-  Priority_Control the_priority
-)
-{
-  return (Priority_Bit_map_control)( the_priority % 16 );
-}
-
-#if ( CPU_USE_GENERIC_BITFIELD_CODE == TRUE )
- 
-/**
- *  This function returns the mask associated with the major or minor
- *  number passed to it.
- */
- 
-RTEMS_INLINE_ROUTINE Priority_Bit_map_control   _Priority_Mask (
-  uint32_t   bit_number
-)
-{
-  return (Priority_Bit_map_control)(0x8000u >> bit_number);
-}
- 
-/**
- *  This function returns the mask bit inverted.
- */
- 
-RTEMS_INLINE_ROUTINE Priority_Bit_map_control   _Priority_Mask_invert (
-  uint32_t   mask
-)
-{
-  return (Priority_Bit_map_control)(~mask);
-}
-
- 
-/**
- *  This function translates the bit numbers returned by the bit scan
- *  of a priority bit field into something suitable for use as
- *  a major or minor component of a priority.
- */
- 
-RTEMS_INLINE_ROUTINE uint32_t   _Priority_Bits_index (
-  uint32_t   bit_number
-)
-{
-  return bit_number;
-}
-
-#endif
-
-/**
- *  This routine uses the_priority_map to update the priority
- *  bit maps to indicate that a thread has been readied.
- */
-
-RTEMS_INLINE_ROUTINE void _Priority_Add_to_bit_map (
-  Priority_Information *the_priority_map
-)
-{
-  *the_priority_map->minor |= the_priority_map->ready_minor;
-  _Priority_Major_bit_map  |= the_priority_map->ready_major;
-}
-
-/**
- *  This routine uses the_priority_map to update the priority
- *  bit maps to indicate that a thread has been removed from the
- *  ready state.
- */
-
-RTEMS_INLINE_ROUTINE void _Priority_Remove_from_bit_map (
-  Priority_Information *the_priority_map
-)
-{
-  *the_priority_map->minor &= the_priority_map->block_minor;
-  if ( *the_priority_map->minor == 0 )
-    _Priority_Major_bit_map &= the_priority_map->block_major;
-}
-
-/**
- *  This function returns the priority of the highest priority
- *  ready thread.
- */
-
-RTEMS_INLINE_ROUTINE Priority_Control _Priority_Get_highest( void )
-{
-  Priority_Bit_map_control minor;
-  Priority_Bit_map_control major;
-
-  _Bitfield_Find_first_bit( _Priority_Major_bit_map, major );
-  _Bitfield_Find_first_bit( _Priority_Bit_map[major], minor );
-
-  return (_Priority_Bits_index( major ) << 4) +
-          _Priority_Bits_index( minor );
-}
-
-/**
- *  This routine initializes the_priority_map so that it
- *  contains the information necessary to manage a thread
- *  at new_priority.
- */
-
-RTEMS_INLINE_ROUTINE void _Priority_Initialize_information(
-  Priority_Information *the_priority_map,
-  Priority_Control      new_priority
-)
-{
-  Priority_Bit_map_control major;
-  Priority_Bit_map_control minor;
-  Priority_Bit_map_control mask;
-
-  major = _Priority_Major( new_priority );
-  minor = _Priority_Minor( new_priority );
-
-  the_priority_map->minor =
-    &_Priority_Bit_map[ _Priority_Bits_index(major) ];
-
-  mask = _Priority_Mask( major );
-  the_priority_map->ready_major = mask;
-  /* Add _Priority_Mask_invert to non-generic bitfield then change this code. */
-  the_priority_map->block_major = (Priority_Bit_map_control)(~((uint32_t)mask));
-
-  mask = _Priority_Mask( minor );
-  the_priority_map->ready_minor = mask;
-  /* Add _Priority_Mask_invert to non-generic bitfield then change this code. */
-  the_priority_map->block_minor = (Priority_Bit_map_control)(~((uint32_t)mask));
-}
-
-/**
- *  This function returns true if the priority GROUP is empty, and
- *  false otherwise.
- */
-
-RTEMS_INLINE_ROUTINE bool _Priority_Is_group_empty (
-  Priority_Control      the_priority
-)
-{
-  return the_priority == 0;
-}
 
 /**@}*/
 
Index: cpukit/sapi/src/exinit.c
===================================================================
RCS file: /usr1/CVS/rtems/cpukit/sapi/src/exinit.c,v
retrieving revision 1.54
diff -u -p -r1.54 exinit.c
--- cpukit/sapi/src/exinit.c	18 Jun 2010 03:03:22 -0000	1.54
+++ cpukit/sapi/src/exinit.c	27 Jul 2010 16:48:50 -0000
@@ -42,6 +42,7 @@
 #include <rtems/score/mpci.h>
 #endif
 #include <rtems/score/priority.h>
+#include <rtems/score/prioritybitmap.h>
 #include <rtems/score/thread.h>
 #include <rtems/score/tod.h>
 #include <rtems/score/userext.h>
@@ -124,7 +125,6 @@ void rtems_initialize_data_structures(vo
   _API_Mutex_Initialization( 1 );
   _API_Mutex_Allocate( &_RTEMS_Allocator_Mutex );
 
-  _Priority_Handler_initialization();
   _Watchdog_Handler_initialization();
   _TOD_Handler_initialization();

Index: cpukit/score/preinstall.am
===================================================================
RCS file: /usr1/CVS/rtems/cpukit/score/preinstall.am,v
retrieving revision 1.23
diff -u -p -r1.23 preinstall.am
--- cpukit/score/preinstall.am	16 Jul 2010 08:31:34 -0000	1.23
+++ cpukit/score/preinstall.am	27 Jul 2010 16:58:54 -0000
@@ -107,6 +107,10 @@ $(PROJECT_INCLUDE)/rtems/score/priority.
 	$(INSTALL_DATA) $< $(PROJECT_INCLUDE)/rtems/score/priority.h
 PREINSTALL_FILES += $(PROJECT_INCLUDE)/rtems/score/priority.h
 
+$(PROJECT_INCLUDE)/rtems/score/prioritybitmap.h: include/rtems/score/prioritybitmap.h $(PROJECT_INCLUDE)/rtems/score/$(dirstamp)
+	$(INSTALL_DATA) $< $(PROJECT_INCLUDE)/rtems/score/prioritybitmap.h
+PREINSTALL_FILES += $(PROJECT_INCLUDE)/rtems/score/prioritybitmap.h
+
 $(PROJECT_INCLUDE)/rtems/score/stack.h: include/rtems/score/stack.h $(PROJECT_INCLUDE)/rtems/score/$(dirstamp)
 	$(INSTALL_DATA) $< $(PROJECT_INCLUDE)/rtems/score/stack.h
 PREINSTALL_FILES += $(PROJECT_INCLUDE)/rtems/score/stack.h
@@ -237,6 +241,10 @@ $(PROJECT_INCLUDE)/rtems/score/priority.
 	$(INSTALL_DATA) $< $(PROJECT_INCLUDE)/rtems/score/priority.inl
 PREINSTALL_FILES += $(PROJECT_INCLUDE)/rtems/score/priority.inl
 
+$(PROJECT_INCLUDE)/rtems/score/prioritybitmap.inl: inline/rtems/score/prioritybitmap.inl $(PROJECT_INCLUDE)/rtems/score/$(dirstamp)
+	$(INSTALL_DATA) $< $(PROJECT_INCLUDE)/rtems/score/prioritybitmap.inl
+PREINSTALL_FILES += $(PROJECT_INCLUDE)/rtems/score/prioritybitmap.inl
+
 $(PROJECT_INCLUDE)/rtems/score/stack.inl: inline/rtems/score/stack.inl $(PROJECT_INCLUDE)/rtems/score/$(dirstamp)
 	$(INSTALL_DATA) $< $(PROJECT_INCLUDE)/rtems/score/stack.inl
 PREINSTALL_FILES += $(PROJECT_INCLUDE)/rtems/score/stack.inl
