diff -upr -X dontdiff rtems/cpukit/rtems/src/clocktick.c rtems-hwds/cpukit/rtems/src/clocktick.c
--- rtems/cpukit/rtems/src/clocktick.c	2010-09-21 12:10:22.000000000 -0400
+++ rtems-hwds/cpukit/rtems/src/clocktick.c	2010-09-29 12:00:18.000000000 -0400
@@ -41,12 +41,19 @@
 
 rtems_status_code rtems_clock_tick( void )
 {
+  ISR_Level          level;
+  _ISR_Disable( level );
+  MAGIC_HWSCHED_START;
+
   _TOD_Tickle_ticks();
 
   _Watchdog_Tickle_ticks();
 
   _Thread_Tickle_timeslice();
 
+  MAGIC_HWSCHED_END;
+  _ISR_Enable( level );
+
   if ( _Thread_Is_context_switch_necessary() &&
        _Thread_Is_dispatching_enabled() )
     _Thread_Dispatch();
diff -upr -X dontdiff rtems/cpukit/score/cpu/sparc64/rtems/score/sparc64.h rtems-hwds/cpukit/score/cpu/sparc64/rtems/score/sparc64.h
--- rtems/cpukit/score/cpu/sparc64/rtems/score/sparc64.h	2010-09-28 12:42:35.000000000 -0400
+++ rtems-hwds/cpukit/score/cpu/sparc64/rtems/score/sparc64.h	2010-09-28 15:44:53.000000000 -0400
@@ -165,10 +165,12 @@ extern "C" {
 
 #endif /* !ASM */
 #define MAGIC_BREAKPOINT MAGIC(0x40000)
+#define MAGIC_HWSCHED_START   MAGIC(0x10)
 #define MAGIC_HWDS1_START      MAGIC(0x100)
 #define MAGIC_HWDS2_START      MAGIC(0x200)
 #define MAGIC_HWDS2_UNPAUSE    MAGIC(0x300)
 
+#define MAGIC_HWSCHED_END     MAGIC(0x80)
 #define MAGIC_HWDS1_END        MAGIC(0x800)
 #define MAGIC_HWDS2_END        MAGIC(0x900)
 #define MAGIC_HWDS2_PAUSE      MAGIC(0xA00)
diff -upr -X dontdiff rtems/cpukit/score/inline/rtems/score/readyq.inl rtems-hwds/cpukit/score/inline/rtems/score/readyq.inl
--- rtems/cpukit/score/inline/rtems/score/readyq.inl	2010-09-23 13:36:35.000000000 -0400
+++ rtems-hwds/cpukit/score/inline/rtems/score/readyq.inl	2010-09-23 14:16:28.000000000 -0400
@@ -44,7 +44,9 @@ RTEMS_INLINE_ROUTINE void _Ready_queue_E
   Thread_Control             *the_thread
 )
 {
+  MAGIC_HWDS1_START;
   the_ready_queue->rq_ops.enqueue( the_ready_queue, the_thread );
+  MAGIC_HWDS1_END;
 }
 
 /*
@@ -61,7 +63,9 @@ RTEMS_INLINE_ROUTINE void _Ready_queue_E
   Thread_Control                   *the_thread
 )
 {
+  MAGIC_HWDS1_START;
   the_ready_queue->rq_ops.enqueue_first( the_ready_queue, the_thread );
+  MAGIC_HWDS1_END;
 }
 
 /** @brief  Ready queue Extract
@@ -73,7 +77,9 @@ RTEMS_INLINE_ROUTINE void _Ready_queue_E
   Thread_Control       *the_thread
 )
 {
+  MAGIC_HWDS1_START;
   the_ready_queue->rq_ops.extract( the_ready_queue, the_thread );
+  MAGIC_HWDS1_END;
 }
 
 
@@ -87,7 +93,11 @@ RTEMS_INLINE_ROUTINE Thread_Control *_Re
   Ready_queue_Control *the_ready_queue
 )
 {
- return ( the_ready_queue->rq_ops.first( the_ready_queue ) );
+  Thread_Control *t;
+ MAGIC_HWDS1_START;
+ t= the_ready_queue->rq_ops.first( the_ready_queue );
+ MAGIC_HWDS1_END;
+ return t;
 }
 
 /**
@@ -104,7 +114,9 @@ RTEMS_INLINE_ROUTINE void _Ready_queue_R
   Thread_Control       *the_thread
 )
 {
+  MAGIC_HWDS1_START;
   the_ready_queue->rq_ops.requeue( the_ready_queue, the_thread );
+  MAGIC_HWDS1_END;
 }
 
 /**@}*/
diff -upr -X dontdiff rtems/cpukit/score/inline/rtems/score/scheduler.inl rtems-hwds/cpukit/score/inline/rtems/score/scheduler.inl
--- rtems/cpukit/score/inline/rtems/score/scheduler.inl	2010-09-21 12:10:39.000000000 -0400
+++ rtems-hwds/cpukit/score/inline/rtems/score/scheduler.inl	2010-09-28 17:07:20.000000000 -0400
@@ -51,7 +51,9 @@ RTEMS_INLINE_ROUTINE void _Scheduler_Sch
     Scheduler_Control *the_scheduler 
 )
 {
+  MAGIC_HWSCHED_START;
   the_scheduler->s_ops.schedule( the_scheduler );
+  MAGIC_HWSCHED_END;
 }
 
 /**
@@ -76,7 +78,9 @@ RTEMS_INLINE_ROUTINE void _Scheduler_Blo
     Thread_Control *the_thread 
 )
 {
+  MAGIC_HWSCHED_START;
   the_scheduler->s_ops.block( the_scheduler, the_thread );
+  MAGIC_HWSCHED_END;
 }
 
 /**
@@ -89,7 +93,9 @@ RTEMS_INLINE_ROUTINE void _Scheduler_Unb
     Thread_Control *the_thread 
 )
 {
+  MAGIC_HWSCHED_START;
   the_scheduler->s_ops.unblock( the_scheduler, the_thread );
+  MAGIC_HWSCHED_END;
 }
 
 /**
@@ -100,7 +106,9 @@ RTEMS_INLINE_ROUTINE void* _Scheduler_Sc
   Thread_Control *the_thread
 )
 {
-  return ( the_scheduler->s_ops.sched_allocate( the_scheduler, the_thread ) );
+  void *v;
+  v= the_scheduler->s_ops.sched_allocate( the_scheduler, the_thread );
+  return v;
 }
 
 /**
@@ -111,7 +119,7 @@ RTEMS_INLINE_ROUTINE void _Scheduler_Sch
   Thread_Control *the_thread
 )
 {
-  return ( the_scheduler->s_ops.sched_free( the_scheduler, the_thread ) );
+  the_scheduler->s_ops.sched_free( the_scheduler, the_thread );
 }
 
 /**
diff -upr -X dontdiff rtems/cpukit/score/src/scheduleredf.c rtems-hwds/cpukit/score/src/scheduleredf.c
--- rtems/cpukit/score/src/scheduleredf.c	2010-09-21 12:10:31.000000000 -0400
+++ rtems-hwds/cpukit/score/src/scheduleredf.c	2010-09-28 17:09:59.000000000 -0400
@@ -37,12 +37,16 @@ void _Scheduler_edf_Release_job(
   ISR_Level       level;
 
   _ISR_Disable( level );
-  
+ 
+  MAGIC_HWSCHED_START;
+
   /* if the thread is already in a ready state, need to dequeue it from
    * the ready queue and then re-enqueue it with the new deadline.
    */
   if ( _States_Is_ready( the_period->owner->current_state ) ) {
+    MAGIC_HWDS1_START;
     _Ready_queue_edf_Extract(&_Scheduler.ready_queue, the_period->owner);
+    MAGIC_HWDS1_END;
 
     /* stamp this job with its new deadline */
     the_period->owner->sched.edf->deadline.value 
@@ -51,7 +55,9 @@ void _Scheduler_edf_Release_job(
     the_period->owner->sched.edf->last_duplicate = 
       &the_period->owner->Object.Node;
 
+    MAGIC_HWDS1_START;
     _Ready_queue_edf_Enqueue(&_Scheduler.ready_queue, the_period->owner);
+    MAGIC_HWDS1_END;
     _Scheduler_Schedule(&_Scheduler);
   } else {
     the_period->owner->sched.edf->deadline.value 
@@ -64,6 +70,8 @@ void _Scheduler_edf_Release_job(
   if (the_period->owner != _Thread_Heir)
     _Thread_Dispatch_necessary = true;
 
+  MAGIC_HWSCHED_END;
+
   _ISR_Enable( level );
 }
 
diff -upr -X dontdiff rtems/cpukit/score/src/schedulerqueueyield.c rtems-hwds/cpukit/score/src/schedulerqueueyield.c
--- rtems/cpukit/score/src/schedulerqueueyield.c	2010-09-21 12:10:31.000000000 -0400
+++ rtems-hwds/cpukit/score/src/schedulerqueueyield.c	2010-09-29 12:39:16.000000000 -0400
@@ -60,12 +60,16 @@ void _Scheduler_queue_Yield( Scheduler_C
 
   executing = _Thread_Executing;
   _ISR_Disable( level );
-      
+  
+      MAGIC_HWSCHED_START;
+      MAGIC_HWDS1_START;
       _Ready_queue_Requeue(&the_scheduler->ready_queue, executing);
+      MAGIC_HWDS1_END;
 
-      _ISR_Flash( level );
+ //     _ISR_Flash( level );
 
       _Scheduler_Schedule(the_scheduler);
+      MAGIC_HWSCHED_END;
     
     if ( !_Thread_Is_heir( executing ) )
       _Thread_Dispatch_necessary = true;
diff -upr -X dontdiff rtems/cpukit/score/src/threadsettransient.c rtems-hwds/cpukit/score/src/threadsettransient.c
--- rtems/cpukit/score/src/threadsettransient.c	2010-09-21 12:10:31.000000000 -0400
+++ rtems-hwds/cpukit/score/src/threadsettransient.c	2010-09-29 13:00:37.000000000 -0400
@@ -58,14 +58,14 @@ void _Thread_Set_transient(
   uint32_t              old_state;
   
   _ISR_Disable( level );
-
+MAGIC_HWSCHED_START;
   old_state = the_thread->current_state;
   the_thread->current_state = _States_Set( STATES_TRANSIENT, old_state );
 
   if ( _States_Is_ready( old_state ) ) {
     _Ready_queue_Extract(&_Scheduler.ready_queue, the_thread);
   }
-
+MAGIC_HWSCHED_END;
   _ISR_Enable( level );
 
 }
diff -upr -X dontdiff rtems/cpukit/score/src/watchdoginsert.c rtems-hwds/cpukit/score/src/watchdoginsert.c
--- rtems/cpukit/score/src/watchdoginsert.c	2010-09-28 12:41:45.000000000 -0400
+++ rtems-hwds/cpukit/score/src/watchdoginsert.c	2010-09-29 14:38:09.000000000 -0400
@@ -52,6 +52,8 @@ void _Watchdog_Insert(
     _ISR_Enable( level );
     return;
   }
+MAGIC_HWSCHED_START;
+  MAGIC_HWDS1_START;
 
   the_watchdog->state = WATCHDOG_BEING_INSERTED;
   _Watchdog_Sync_count++;
@@ -96,7 +98,9 @@ restart:
       *  mechanism used here WAS redesigned to address this.
       */
 
+  MAGIC_HWDS1_END;
 //     _ISR_Flash( level );
+  MAGIC_HWDS1_START;
 
      if ( the_watchdog->state != WATCHDOG_BEING_INSERTED ) {
        goto exit_insert;
@@ -119,5 +123,7 @@ restart:
 exit_insert:
   _Watchdog_Sync_level = insert_isr_nest_level;
   _Watchdog_Sync_count--;
+  MAGIC_HWDS1_END;
+  MAGIC_HWSCHED_END;
   _ISR_Enable( level );
 }
diff -upr -X dontdiff rtems/cpukit/score/src/watchdogremove.c rtems-hwds/cpukit/score/src/watchdogremove.c
--- rtems/cpukit/score/src/watchdogremove.c	2010-09-23 13:36:11.000000000 -0400
+++ rtems-hwds/cpukit/score/src/watchdogremove.c	2010-09-29 14:38:31.000000000 -0400
@@ -37,6 +37,8 @@ Watchdog_States _Watchdog_Remove(
   Watchdog_Control *next_watchdog;
 
   _ISR_Disable( level );
+  MAGIC_HWSCHED_START;
+  MAGIC_HWDS1_START;
   previous_state = the_watchdog->state;
   switch ( previous_state ) {
     case WATCHDOG_INACTIVE:
@@ -67,6 +69,8 @@ Watchdog_States _Watchdog_Remove(
       break;
   }
   the_watchdog->stop_time = _Watchdog_Ticks_since_boot;
+  MAGIC_HWDS1_END;
+  MAGIC_HWSCHED_END;
   _ISR_Enable( level );
   return( previous_state );
 }
